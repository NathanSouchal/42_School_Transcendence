events {}  # Configuration des √©v√©nements Nginx (souvent vide par d√©faut)

http {
    # üîπ Inclut les types MIME pour d√©finir les types de fichiers servables
    include /etc/nginx/mime.types;
    default_type application/octet-stream;  # D√©finit un type de fichier par d√©faut si inconnu

    # üîµ Redirection HTTP vers HTTPS
    server {
        listen 80;  # √âcoute sur le port HTTP standard (80)
        server_name localhost;  # D√©finit le nom du serveur (localhost ici)

        location / {
            return 301 https://$host$request_uri;  # Redirige toutes les requ√™tes HTTP vers HTTPS
        }
    }

    # üî¥ Serveur HTTPS
    server {
        listen 443 ssl;  # √âcoute sur le port HTTPS (443) avec SSL activ√©
        server_name localhost;  # D√©finit le nom du serveur

        # üìú Utilisation du certificat g√©n√©r√© par mkcert
        ssl_certificate /etc/nginx/certs/selfsigned.crt;  # Chemin vers le certificat SSL
        ssl_certificate_key /etc/nginx/certs/selfsigned.key;  # Cl√© priv√©e associ√©e au certificat
        ssl_protocols TLSv1.2 TLSv1.3;  # D√©finit les protocoles TLS support√©s
        ssl_ciphers HIGH:!aNULL:!MD5;  # S√©lectionne les suites de chiffrement s√©curis√©es
        ssl_prefer_server_ciphers on;  # Priorise les ciphers du serveur au lieu de ceux du client
        ssl_session_cache shared:SSL:10m;  # Active un cache de session SSL partag√© (10 Mo)
        ssl_session_timeout 10m;  # D√©finit un timeout de session SSL de 10 minutes
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;  # Active HSTS pour forcer HTTPS

        # üîπ Servir les fichiers frontend statiques
        location / {
            root /usr/share/nginx/html;  # D√©finit le r√©pertoire racine pour le frontend
            index index.html;  # Fichier par d√©faut lorsque l'on acc√®de au site
            try_files $uri /index.html;  # Redirige vers index.html si le fichier demand√© n'existe pas (utile pour SPAs)
        }

        # üîπ Faire proxy vers le backend Django
        location /api/ {
            proxy_pass http://backend:8000;  # Redirige toutes les requ√™tes commen√ßant par /api/ vers le backend Django
            proxy_set_header Host $host;  # Transmet l'en-t√™te Host original
            proxy_set_header X-Real-IP $remote_addr;  # Transmet l'IP r√©elle du client
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Conserve la cha√Æne des IPs client pour les logs
            proxy_set_header X-Forwarded-Proto $scheme;  # En-t√™te pour indiquer le protocole HTTPS
            client_max_body_size 10M;  # Augmente la taille maximale des requ√™tes POST
        }

                # üîπ Faire proxy vers les WebSockets du backend Django
        location /ws/ {
            proxy_pass http://backend:8000;  # Redirige WebSockets vers le backend Django
            proxy_http_version 1.1;  # Version HTTP 1.1 n√©cessaire pour WebSockets
            proxy_set_header Upgrade $http_upgrade;  # Indique que la connexion est une mise √† niveau WebSocket
            proxy_set_header Connection "Upgrade";  # N√©cessaire pour WebSockets
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;  # Emp√™che Nginx de fermer la connexion WebSocket trop t√¥t
        }


        # üìÅ Servir les fichiers statiques de Django
        location /static/ {
            alias /usr/share/nginx/html/static/;  # D√©finit l'emplacement des fichiers statiques
        }
    }
}
