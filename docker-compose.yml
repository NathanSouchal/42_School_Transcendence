services:
  backend:
    container_name: backend
    networks:
      - transcendence
    build:
      context: backend
      dockerfile: Dockerfile
    env_file: .env
    restart: on-failure
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app # ✅ Monte le dossier backend pour le hot reload
      - backend_static:/app/static # ✅ Stocker les fichiers statiques de Django
    ports:
      - "8000:8000" # API Django
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        mode: "non-blocking"

  frontend:
    container_name: frontend
    networks:
      - transcendence
    build:
      context: frontend
      dockerfile: Dockerfile
    env_file: .env
    restart: unless-stopped
    volumes:
      - ./frontend:/app # ✅ Monte le dossier frontend pour le hot reload
    ports:
      - "3000:3000" # Vite.js expose le frontend en dev

  postgres:
    image: postgres:15
    container_name: postgres
    networks:
      - transcendence
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nginx:
    container_name: nginx
    networks:
      - transcendence
    build:
      context: .
      dockerfile: nginx/Dockerfile
    depends_on:
      - backend
      - frontend
    ports:
      - "8080:80" # HTTP (redirigé vers HTTPS)
      - "8443:443" # HTTPS
    volumes:
      - ./nginx/certs/selfsigned.crt:/etc/nginx/selfsigned.crt
      - ./nginx/certs/selfsigned.key:/etc/nginx/selfsigned.key
      - backend_static:/usr/share/nginx/html/static/ # ✅ Partage les fichiers statiques de Django

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - transcendence

networks:
  transcendence:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  backend_static: # ✅ Volume pour stocker les fichiers statiques du backend
    driver: local
